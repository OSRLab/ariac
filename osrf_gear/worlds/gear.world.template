@{
import em, StringIO, os
def expand_snippet(filename, data=locals()):
    output = StringIO.StringIO()
    interpreter = em.Interpreter(output=output)
    interpreter.include(os.path.join(world_dir, 'snippet', filename), data)
    print output.getvalue()
}@
<?xml version="1.0" ?>
<sdf version="1.5">
  <world name="ariac">
    <!-- Set the initial camera pose to be looking at the workspace. -->
    <gui>
      <camera name="user_camera">
        <pose>7.75 -5.6 5.3 0 0.5 2.46</pose>
      </camera>
    </gui>

@[if options['unthrottled_physics_update']]@
    <physics type="ode">
      <real_time_update_rate>0</real_time_update_rate>
    </physics>
@[end if]@

@[if not options['disable_shadows']]@
    <!-- Disable shadows. -->
    <scene>
      <shadows>false</shadows>
    </scene>
@[end if]@

    <!-- A global light source -->
    <include>
      <uri>model://sun</uri>
    </include>

    <!-- A directed light source -->
    <light name="camera_spot_light" type='spot'>
      <pose>14 -3.0 3.0 -1.55 0.0 -1.62</pose>
      <diffuse>0.5 0.5 0.5 1</diffuse>
      <specular>0.1 0.1 0.1 1</specular>
      <direction>0 0 -1</direction>
      <attenuation>
        <range>50</range>
        <constant>0.5</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <cast_shadows>0</cast_shadows>
      <spot>
        <inner_angle>0.6</inner_angle>
        <outer_angle>1</outer_angle>
        <falloff>1</falloff>
      </spot>
    </light>

    <!-- Pad to detect (and delete) boxes at the end of the belt -->
    <include>
      <name>drone_collection_zone</name>
      <uri>model://drone_collection_zone</uri>
      <pose>1.0 -4.6 0.005 0 1.5707 0</pose>
    </include>

    <!-- the workcell -->
    <include>
      <uri>model://shipping_container</uri>
      <pose>0.42 -1.0 0 0 0 0</pose>
    </include>

@[for bin_name, bin_pose in bins.items()]@
    <include>
      <name>@(bin_name)</name>
      <uri>model://yellow_bin</uri>
      <pose>@(' '.join(bin_pose.xyz)) @(' '.join(bin_pose.rpy))</pose>
    </include>
@[end for]@

@[for name, sensor in sensors.items()]@
@[if sensor.type == "quality_control"]@
    <!-- a quality control sensor called @(name) -->
@{
expand_snippet('quality_control_sensor.sdf.template')
}@
@[end if]@

@[if sensor.type == "break_beam"]@
    <!-- a break beam sensor called @(name) -->
@{
expand_snippet('break_beam.sdf.template')
}@
@[end if]@

@[if sensor.type == "proximity_sensor"]@
    <!-- a proximity sensor called @(name) -->
@{
expand_snippet('proximity_sensor.sdf.template')
}@

@[end if]@
@[if sensor.type == "logical_camera"]@
    <!-- a logical camera called @(name) -->
@{
expand_snippet('logical_camera.sdf.template')
}@

@[end if]@
@[if sensor.type == "depth_camera"]@
    <!-- a laser profiler called @(name) -->
@{
expand_snippet('depth_camera.sdf.template')
}@
@[end if]@
@[if sensor.type == "laser_profiler"]@
    <!-- a laser profiler called @(name) -->
@{
expand_snippet('laser_profiler.sdf.template')
}@
@[end if]@
@[end for]@

@{shipping_boxes_on_belt = 0}@
@[if options['insert_shipping_boxes']]@
@[  if options['start_box_at_belt_center']]@
    <!-- start with an extra box in the middle of the belt -->
@{shipping_box_name = 'shipping_box_' + str(shipping_boxes_on_belt)}@
    <model name="@(shipping_box_name)">
      <pose>1.16 0.9 0.45 0 0 0</pose>
@{
expand_snippet('shipping_box.sdf.template')
}@
    </model>
@{shipping_boxes_on_belt += 1}@
@[  end if]@

    <!-- start with a box on the belt -->
@{shipping_box_name = 'shipping_box_' + str(shipping_boxes_on_belt)}@
    <model name="@(shipping_box_name)">
      <pose>1.16 4.0 0.9 0 0 0</pose>
@{
expand_snippet('shipping_box.sdf.template')
}@
    </model>
@{shipping_boxes_on_belt += 1}@

@[end if]@

@{belt_models_loop = True}@
@{belt_population_cycles = options['belt_population_cycles'] if belt_models_loop else 1}

@{obj_type_index = 0}@
@[for obj_type, spawn_times in belt_models.items()]@
    <!-- Pool of @(obj_type) objects -->
@[  for index in range(belt_population_cycles * len(spawn_times))]@
@[    if obj_type is 'shipping_box']@
@[      if options['insert_shipping_boxes']]@
@{shipping_box_name = 'shipping_box_' + str(index + shipping_boxes_on_belt)}@
    <model name="@(shipping_box_name)">
      <pose>@(7.5 + 1.25 * obj_type_index) @(-9.8 + 1.25 * index) -4.9 0 0 0</pose>
@{
expand_snippet('shipping_box.sdf.template')
}@
    </model>
@[      end if]@
@[    else]@
    <include>
      <uri>model://@(obj_type)_ariac</uri>
      <name>@(obj_type)_@(index)</name>
      <pose>@(7.5 + 0.25 * obj_type_index) @(-9.8 + 0.25 * index) -5.0 0 0 0</pose>
    </include>
@[    end if]@

@[  end for]@
@{obj_type_index += 1}@
@[end for]@

    <!-- drone for delivering shipping boxes -->
    <model name="drone">
      <pose>-1.4 -9.4 4.3 0 0 1.5707</pose>
      <include>
        <name>drone</name>
        <uri>model://drone_with_box</uri>
      </include>
      <plugin name="drone_plugin" filename="libROSDronePlugin.so">
        <submit_shipment_service_name>/ariac/submit_shipment</submit_shipment_service_name>
        <waiting_box_topic>/ariac/waiting_shipping_box</waiting_box_topic>
      </plugin>
    </model>

    <!-- an invisible conveyor belt -->
      <include>
        <name>conveyor_belt</name>
        <uri>model://conveyor_belt</uri>
      </include>

@[if options['insert_models_over_bins']]@
    <!-- Populate the bins -->
@[for model_name, model in models_to_insert.items()]@
    <include>
      <name>@(model_name)</name>
      <uri>model://@(model.type)_ariac</uri>
      <pose>@(' '.join(model.pose.xyz)) @(' '.join(model.pose.rpy))</pose>
    </include>
@[end for]@
@[end if]@
@[if belt_models]@

    <!-- Populate the conveyor belt -->
    <plugin filename="libROSPopulationPlugin.so" name="populate_conveyor">
      <activation_topic>/ariac/populate_belt</activation_topic>
      <rate_modifier_topic>/ariac/population/rate_modifier</rate_modifier_topic>
      <control_topic>/ariac/population/control</control_topic>
      <state_topic>/ariac/population/state</state_topic>
      <start_index>@(shipping_boxes_on_belt)</start_index>
      <prefix_object_names>false</prefix_object_names>
      <loop_forever>@("true" if belt_models_loop else "false")</loop_forever>
      <frame>conveyor_belt::conveyor_belt_fixed</frame>
      <object_sequence>
@[for part_name, spawn_times in belt_models.items()]@
  @[for spawn_time, part in spawn_times.items()]@
        <object>
          <time>@(spawn_time)</time>
          <type>@(part.type)</type>
          <pose>@(' '.join(part.pose.xyz)) @(' '.join(part.pose.rpy))</pose>
        </object>
  @[end for]@
@[end for]@
      </object_sequence>
      <update_rate>10</update_rate>
    </plugin>
@[end if]@

    <!-- The NIST-ARIAC task manager -->
    <plugin filename="libROSAriacTaskManagerPlugin.so" name="task_manager">
      <robot_namespace>ariac</robot_namespace>
      <competition_time_limit>@(time_limit)</competition_time_limit>
      <start_competition_service_name>/ariac/start_competition</start_competition_service_name>
      <end_competition_service_name>/ariac/end_competition</end_competition_service_name>
      <population_activate_topic>/ariac/populate_belt</population_activate_topic>
      <conveyor_control_topic>/ariac/conveyor/control</conveyor_control_topic>
      <submit_shipment_service_name>/ariac/submit_shipment</submit_shipment_service_name>
      <material_locations_service_name>/ariac/material_locations</material_locations_service_name>
      <orders_topic>/ariac/orders</orders_topic>
@[for order_name, order in orders.items()]@
      <order>
@[if order['announcement_condition'] == 'time']@
        <start_time>@(order['announcement_condition_value'])</start_time>
@[end if]@
@[if order['announcement_condition'] == 'wanted_parts']@
        <interrupt_on_wanted_parts>@(order['announcement_condition_value'])</interrupt_on_wanted_parts>
@[end if]@
@[if order['announcement_condition'] == 'unwanted_parts']@
        <interrupt_on_unwanted_parts>@(order['announcement_condition_value'])</interrupt_on_unwanted_parts>
@[end if]@
@[for shipment_index in range(order['shipment_count'])]
        <shipment>
          <shipment_type>@(order_name)_shipment_@(shipment_index)</shipment_type>
@[for part in order['parts']]@
          <product>
            <type>@(part.type)</type>
            <pose>@(' '.join(part.pose.xyz)) @(' '.join(part.pose.rpy))</pose>
          </product>
@[end for]@
        </shipment>
@[end for]@
      </order>
@[end for]@
      <material_locations>
@[for material_name, locations in material_locations.items()]@
        <material>
          <type>@(material_name)</type>
@[for location in locations]@
          <location>
            <storage_unit>@(location)</storage_unit>
          </location>
@[end for]@
        </material>
@[end for]@
      </material_locations>

    </plugin>

    <!-- Plane under the workcell on which 'removed' models can be placed -->
    <model name="under_workcell_plane">
      <pose>0 0 -5.1 0 0 0</pose>
      <static>true</static>
      <link name="link">
        <collision name="collision">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>25 25</size>
            </plane>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>100</mu>
                <mu2>50</mu2>
              </ode>
            </friction>
          </surface>
        </collision>
      </link>
    </model>

    <!-- A ground plane to hide the under_workcell_plane -->
    <model name="ground_plane">
      <static>true</static>
      <pose>-50 50 0 0 0 0</pose>
      <link name="link">
        <visual name="visual">
          <cast_shadows>false</cast_shadows>
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>150 150</size>
            </plane>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Grey</name>
            </script>
          </material>
        </visual>
      </link>
    </model>

@[if options['fill_demo_shipment'] and orders and options['insert_shipping_boxes']]@
@{
order_name, order = orders.items()[0]
count = {}
}@
    <!-- Populate shipping_box_0 with order parts -->
    <plugin filename="libPopulationPlugin.so" name="populate_box_0">
      <activation_topic>/ariac/populate_belt</activation_topic>
      <loop_forever>false</loop_forever>
      <prefix_object_names>true</prefix_object_names>
      <frame>shipping_box_0::box_base</frame>
      <object_sequence>
@[for part in order['parts']]@
        <object>
          <time>0.0</time>
          <type>@(part.type)</type>
          <pose>@(' '.join(part.pose.xyz[0:-1])) 0.00 @(' '.join(part.pose.rpy))</pose>
        </object>
@[end for]@
      </object_sequence>
    </plugin>

    <!-- Insert models to fill the shipping box -->
@[for part in order['parts']]@
@{
try:
    id = count[part.type]
except:
    id = 0
}@
    <include>
      <name>populate_box_0|@(part.type)_@(id)</name>
      <uri>model://@(part.type)_ariac</uri>
      <pose>-7.5 -3 -1.0 0 0 0</pose>
    </include>
@{
count[part.type] = id + 1
}@
@[end for]@

@[end if]@

    <!-- Plugin to stop the belt when congestion is detected. -->
    <!-- There's a `congestion_sensor` at the end of the belt that's a break beam.
      If this detects a model, and the `drone_collection_zone` detects a box waiting,
      then this plugin will set the belt power to 0 and disable conveyor belt control.
      Control will be reenabled when the waiting box gets collected (power left at 0). -->
    <plugin filename="libROSConveyorCongestionPlugin.so" name="congestion_controller">
      <congestion_sensor_topic>/ariac/congestion_sensor</congestion_sensor_topic>
      <conveyor_control_topic>/ariac/conveyor_enable</conveyor_control_topic>
      <waiting_box_topic>/ariac/waiting_shipping_box</waiting_box_topic>
    </plugin>

  </world>
</sdf>
